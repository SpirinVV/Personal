import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..models import get_db_session, User, Website
from ..services.user_service import UserService

logger = logging.getLogger(__name__)
router = Router()


async def is_admin_filter(message_or_callback):
    user_id = message_or_callback.from_user.id
    
    async for session in get_db_session():
        user_service = UserService(session)
        return await user_service.is_admin(user_id)


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if not await is_admin_filter(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_stats"))
    keyboard.add(InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"))
    keyboard.add(InlineKeyboardButton(text="üåê –í—Å–µ —Å–∞–π—Ç—ã", callback_data="admin_websites"))
    keyboard.add(InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_logs"))
    keyboard.add(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="admin_restart_monitoring"))
    keyboard.adjust(1)
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data == "admin_stats")
async def admin_system_stats(callback: CallbackQuery):
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    async for session in get_db_session():
        try:
            from sqlalchemy import select, func
            from ..models import User, Website, HealthCheck, Incident
            
            users_result = await session.execute(
                select(
                    func.count(User.id).label('total_users'),
                    func.count(User.id).filter(User.is_active == True).label('active_users'),
                    func.count(User.id).filter(User.is_admin == True).label('admin_users')
                )
            )
            user_stats = users_result.first()
            
            websites_result = await session.execute(
                select(
                    func.count(Website.id).label('total_websites'),
                    func.count(Website.id).filter(Website.is_active == True).label('active_websites'),
                    func.count(Website.id).filter(Website.current_status == 'up').label('up_websites'),
                    func.count(Website.id).filter(Website.current_status == 'down').label('down_websites')
                )
            )
            website_stats = websites_result.first()
            
            from datetime import datetime, timedelta
            yesterday = datetime.now() - timedelta(days=1)
            
            checks_result = await session.execute(
                select(
                    func.count(HealthCheck.id).label('total_checks'),
                    func.count(HealthCheck.id).filter(HealthCheck.status == 'up').label('successful_checks')
                ).where(HealthCheck.checked_at >= yesterday)
            )
            check_stats = checks_result.first()
            
            week_ago = datetime.now() - timedelta(days=7)
            incidents_result = await session.execute(
                select(
                    func.count(Incident.id).label('total_incidents'),
                    func.count(Incident.id).filter(Incident.status == 'open').label('open_incidents')
                ).where(Incident.started_at >= week_ago)
            )
            incident_stats = incidents_result.first()
            
            success_rate = (check_stats.successful_checks / check_stats.total_checks * 100) if check_stats.total_checks > 0 else 0
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {user_stats.total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.active_users}  
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {user_stats.admin_users}

üåê <b>–°–∞–π—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {website_stats.total_websites}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {website_stats.active_websites}
‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {website_stats.up_websites}
‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {website_stats.down_websites}

üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∏ (24—á):</b>
‚Ä¢ –í—Å–µ–≥–æ: {check_stats.total_checks}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {check_stats.successful_checks}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%

üö® <b>–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã (7 –¥–Ω–µ–π):</b>
‚Ä¢ –í—Å–µ–≥–æ: {incident_stats.total_incidents}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {incident_stats.open_incidents}
            """
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"))
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                stats_text.strip(),
                reply_markup=keyboard.as_markup()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "admin_users")
async def admin_users_list(callback: CallbackQuery):
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    async for session in get_db_session():
        try:
            from sqlalchemy import select
            
            result = await session.execute(
                select(User)
                .order_by(User.created_at.desc())
                .limit(20)
            )
            users = result.scalars().all()
            
            if not users:
                await callback.message.edit_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            
            for user in users:
                status = "üü¢" if user.is_active else "üî¥"
                admin_mark = "üëë" if user.is_admin else ""
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                
                text += f"{status} {admin_mark} <b>{user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
                text += f"   {username} (ID: {user.telegram_id})\n"
                text += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
            
            await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data == "admin_websites")
async def admin_websites_list(callback: CallbackQuery):
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    async for session in get_db_session():
        try:
            from sqlalchemy import select
            from sqlalchemy.orm import selectinload
            
            result = await session.execute(
                select(Website)
                .options(selectinload(Website.owner))
                .order_by(Website.created_at.desc())
                .limit(15)
            )
            websites = result.scalars().all()
            
            if not websites:
                await callback.message.edit_text("üåê –°–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üåê <b>–í—Å–µ —Å–∞–π—Ç—ã:</b>\n\n"
            
            for website in websites:
                status_emoji = "üü¢" if website.current_status == "up" else "üî¥" if website.current_status == "down" else "‚ö™"
                active_mark = "‚úÖ" if website.is_active else "‚è∏Ô∏è"
                owner_name = website.owner.first_name if website.owner else "Unknown"
                
                text += f"{status_emoji} {active_mark} <b>{website.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                text += f"   üîó <code>{website.url[:50]}...</code>\n"
                text += f"   üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_name}\n"
                text += f"   üìä Uptime: {website.uptime_percentage:.1f}%\n\n"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
            
            await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤")


@router.callback_query(F.data == "admin_restart_monitoring")
async def admin_restart_monitoring(callback: CallbackQuery):
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        from ..main import bot_instance
        
        if bot_instance.monitoring_service:
            await bot_instance.monitoring_service.stop()
            await bot_instance.monitoring_service.start()
        
        await callback.message.edit_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    await cmd_admin(callback.message)
    await callback.answer()


@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if not await is_admin_filter(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text = message.text.replace("/broadcast", "").strip()
    
    if not text:
        await message.answer(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/broadcast —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        )
        return
    
    async for session in get_db_session():
        try:
            user_service = UserService(session)
            users = await user_service.get_active_users()
            
            sent_count = 0
            failed_count = 0
            
            status_message = await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            
            for user in users:
                try:
                    await message.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{text}",
                        parse_mode='HTML'
                    )
                    sent_count += 1
                except Exception:
                    failed_count += 1
            
            await status_message.edit_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")


def register_admin_handlers(dp) -> None:
    dp.include_router(router)


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    if not await is_admin_filter(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_stats"))
    keyboard.add(InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"))
    keyboard.add(InlineKeyboardButton(text="üåê –í—Å–µ —Å–∞–π—Ç—ã", callback_data="admin_websites"))
    keyboard.add(InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_logs"))
    keyboard.add(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="admin_restart_monitoring"))
    keyboard.adjust(1)
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data == "admin_stats")
async def admin_system_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    async for session in get_db_session():
        try:
            from sqlalchemy import select, func
            from ..models import User, Website, HealthCheck, Incident
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_result = await session.execute(
                select(
                    func.count(User.id).label('total_users'),
                    func.count(User.id).filter(User.is_active == True).label('active_users'),
                    func.count(User.id).filter(User.is_admin == True).label('admin_users')
                )
            )
            user_stats = users_result.first()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–æ–≤
            websites_result = await session.execute(
                select(
                    func.count(Website.id).label('total_websites'),
                    func.count(Website.id).filter(Website.is_active == True).label('active_websites'),
                    func.count(Website.id).filter(Website.current_status == 'up').label('up_websites'),
                    func.count(Website.id).filter(Website.current_status == 'down').label('down_websites')
                )
            )
            website_stats = websites_result.first()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
            from datetime import datetime, timedelta
            yesterday = datetime.now() - timedelta(days=1)
            
            checks_result = await session.execute(
                select(
                    func.count(HealthCheck.id).label('total_checks'),
                    func.count(HealthCheck.id).filter(HealthCheck.status == 'up').label('successful_checks')
                ).where(HealthCheck.checked_at >= yesterday)
            )
            check_stats = checks_result.first()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            week_ago = datetime.now() - timedelta(days=7)
            incidents_result = await session.execute(
                select(
                    func.count(Incident.id).label('total_incidents'),
                    func.count(Incident.id).filter(Incident.status == 'open').label('open_incidents')
                ).where(Incident.started_at >= week_ago)
            )
            incident_stats = incidents_result.first()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            success_rate = (check_stats.successful_checks / check_stats.total_checks * 100) if check_stats.total_checks > 0 else 0
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {user_stats.total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.active_users}  
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {user_stats.admin_users}

üåê <b>–°–∞–π—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {website_stats.total_websites}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {website_stats.active_websites}
‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {website_stats.up_websites}
‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {website_stats.down_websites}

üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∏ (24—á):</b>
‚Ä¢ –í—Å–µ–≥–æ: {check_stats.total_checks}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {check_stats.successful_checks}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%

üö® <b>–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã (7 –¥–Ω–µ–π):</b>
‚Ä¢ –í—Å–µ–≥–æ: {incident_stats.total_incidents}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {incident_stats.open_incidents}
            """
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"))
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                stats_text.strip(),
                reply_markup=keyboard.as_markup()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "admin_users")
async def admin_users_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    async for session in get_db_session():
        try:
            from sqlalchemy import select
            
            result = await session.execute(
                select(User)
                .order_by(User.created_at.desc())
                .limit(20)
            )
            users = result.scalars().all()
            
            if not users:
                await callback.message.edit_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            
            for user in users:
                status = "üü¢" if user.is_active else "üî¥"
                admin_mark = "üëë" if user.is_admin else ""
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                
                text += f"{status} {admin_mark} <b>{user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
                text += f"   {username} (ID: {user.telegram_id})\n"
                text += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
            
            await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data == "admin_websites")
async def admin_websites_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤"""
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    async for session in get_db_session():
        try:
            from sqlalchemy import select
            from sqlalchemy.orm import selectinload
            
            result = await session.execute(
                select(Website)
                .options(selectinload(Website.owner))
                .order_by(Website.created_at.desc())
                .limit(15)
            )
            websites = result.scalars().all()
            
            if not websites:
                await callback.message.edit_text("üåê –°–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üåê <b>–í—Å–µ —Å–∞–π—Ç—ã:</b>\n\n"
            
            for website in websites:
                status_emoji = "üü¢" if website.current_status == "up" else "üî¥" if website.current_status == "down" else "‚ö™"
                active_mark = "‚úÖ" if website.is_active else "‚è∏Ô∏è"
                owner_name = website.owner.first_name if website.owner else "Unknown"
                
                text += f"{status_emoji} {active_mark} <b>{website.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                text += f"   üîó <code>{website.url[:50]}...</code>\n"
                text += f"   üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_name}\n"
                text += f"   üìä Uptime: {website.uptime_percentage:.1f}%\n\n"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
            
            await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤")


@router.callback_query(F.data == "admin_restart_monitoring")
async def admin_restart_monitoring(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if not await is_admin_filter(callback):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        from ..main import bot_instance
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if bot_instance.monitoring_service:
            await bot_instance.monitoring_service.stop()
            await bot_instance.monitoring_service.start()
        
        await callback.message.edit_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await cmd_admin(callback.message)
    await callback.answer()


@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not await is_admin_filter(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
    text = message.text.replace("/broadcast", "").strip()
    
    if not text:
        await message.answer(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/broadcast —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        )
        return
    
    async for session in get_db_session():
        try:
            user_service = UserService(session)
            users = await user_service.get_active_users()
            
            sent_count = 0
            failed_count = 0
            
            status_message = await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            
            for user in users:
                try:
                    await message.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{text}",
                        parse_mode='HTML'
                    )
                    sent_count += 1
                except Exception:
                    failed_count += 1
            
            await status_message.edit_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")


def register_admin_handlers(dp) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)