import logging
import validators
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..models import get_db_session
from ..services.user_service import UserService
from ..services.website_service import WebsiteService

logger = logging.getLogger(__name__)
router = Router()


class AddWebsiteStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_name = State()
    waiting_for_interval = State()


@router.message(Command("add"))
async def cmd_add_website(message: Message, state: FSMContext):
    await state.set_state(AddWebsiteStates.waiting_for_url)
    await message.answer(
        "üåê <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com)"
    )


@router.message(AddWebsiteStates.waiting_for_url)
async def process_website_url(message: Message, state: FSMContext):
    url = message.text.strip()
    
    if not validators.url(url):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com)"
        )
        return
    
    await state.update_data(url=url)
    await state.set_state(AddWebsiteStates.waiting_for_name)
    
    await message.answer(
        f"‚úÖ URL –ø—Ä–∏–Ω—è—Ç: <code>{url}</code>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )


@router.message(AddWebsiteStates.waiting_for_name)
async def process_website_name(message: Message, state: FSMContext):
    if message.text.strip() == "/skip":
        name = None
    else:
        name = message.text.strip()
    
    await state.update_data(name=name)
    await state.set_state(AddWebsiteStates.waiting_for_interval)
    
    await message.answer(
        "‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):\n\n"
        "‚Ä¢ 60 - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
        "‚Ä¢ 300 - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ 600 - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ 1800 - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (300 —Å–µ–∫)"
    )


@router.message(AddWebsiteStates.waiting_for_interval)
async def process_website_interval(message: Message, state: FSMContext):
    if message.text.strip() == "/skip":
        interval = 300
    else:
        try:
            interval = int(message.text.strip())
            if interval < 60:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 60 —Å–µ–∫—É–Ω–¥")
                return
            if interval > 3600:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 60 –¥–æ 3600")
            return
    
    data = await state.get_data()
    url = data['url']
    name = data.get('name')
    
    async for session in get_db_session():
        website_service = WebsiteService(session)
        
        website = await website_service.add_website(
            owner_telegram_id=message.from_user.id,
            url=url,
            name=name,
            check_interval=interval
        )
        
        if website:
            from ..main import bot_instance
            if bot_instance.monitoring_service:
                await bot_instance.monitoring_service.start_monitoring_website(website.id)
            
            await message.answer(
                f"‚úÖ <b>–°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üåê <b>URL:</b> <code>{url}</code>\n"
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {interval} —Å–µ–∫\n\n"
                f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()


@router.message(Command("list"))
async def cmd_list_websites(message: Message):
    async for session in get_db_session():
        website_service = WebsiteService(session)
        websites = await website_service.get_user_websites(message.from_user.id)
        
        if not websites:
            await message.answer(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–∞–π—Ç–∞."
            )
            return
        
        keyboard = InlineKeyboardBuilder()
        
        text = "üìã <b>–í–∞—à–∏ —Å–∞–π—Ç—ã:</b>\n\n"
        
        for i, website in enumerate(websites, 1):
            status_emoji = "üü¢" if website.current_status == "up" else "üî¥" if website.current_status == "down" else "‚ö™"
            name = website.name or website.url[:30] + "..."
            
            text += f"{status_emoji} <b>{i}. {name}</b>\n"
            text += f"   üîó <code>{website.url}</code>\n"
            
            if website.last_check:
                text += f"   üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {website.last_check.strftime('%d.%m %H:%M')}\n"
            
            if website.last_response_time:
                text += f"   ‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {website.last_response_time:.0f}–º—Å\n"
            
            text += f"   üìä Uptime: {website.uptime_percentage:.1f}%\n\n"
            
            keyboard.add(InlineKeyboardButton(
                text=f"üìä {name[:15]}...",
                callback_data=f"website_details:{website.id}"
            ))
        
        keyboard.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç", callback_data="add_website"))
        keyboard.adjust(2, 1)
        
        await message.answer(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.startswith("website_details:"))
async def show_website_details(callback: CallbackQuery):
    website_id = int(callback.data.split(":")[1])
    
    async for session in get_db_session():
        website_service = WebsiteService(session)
        website = await website_service.get_website_details(website_id)
        
        if not website:
            await callback.answer("‚ùå –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user or website.owner_id != user.id:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–∞–π—Ç—É")
            return
        
        status_emoji = "üü¢" if website.current_status == "up" else "üî¥" if website.current_status == "down" else "‚ö™"
        name = website.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        
        text = f"""
{status_emoji} <b>{name}</b>

üîó <b>URL:</b> <code>{website.url}</code>
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {website.current_status.upper()}
‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {website.check_interval} —Å–µ–∫

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ Uptime: {website.uptime_percentage:.1f}%
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {website.total_checks}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {website.successful_checks}
        """
        
        if website.last_check:
            text += f"\nüîç <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {website.last_check.strftime('%d.%m.%Y %H:%M:%S')}"
        
        if website.last_response_time:
            text += f"\n‚ö° <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</b> {website.last_response_time:.0f} –º—Å"
        
        if website.last_error:
            text += f"\n‚ùå <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</b> {website.last_error}"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"check_now:{website.id}"))
        keyboard.add(InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"website_settings:{website.id}"))
        keyboard.add(InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"website_history:{website.id}"))
        keyboard.add(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_website:{website.id}"))
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_websites"))
        keyboard.adjust(2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.startswith("check_now:"))
async def force_check_website(callback: CallbackQuery):
    website_id = int(callback.data.split(":")[1])
    
    await callback.answer("üîç –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    
    from ..main import bot_instance
    if bot_instance.monitoring_service:
        result = await bot_instance.monitoring_service.force_check_website(website_id)
        
        if result:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if result['status'] == 'up' else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            response_time = f"{result['response_time']:.0f} –º—Å" if result['response_time'] else "N/A"
            
            await callback.message.answer(
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"‚ö° <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</b> {response_time}\n"
                f"üî¢ <b>HTTP –∫–æ–¥:</b> {result.get('status_code', 'N/A')}"
            )
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏")


@router.callback_query(F.data.startswith("delete_website:"))
async def confirm_delete_website(callback: CallbackQuery):
    website_id = int(callback.data.split(":")[1])
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{website_id}"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"website_details:{website_id}"))
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∞–π—Ç?\n"
        "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞.",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith("confirm_delete:"))
async def delete_website(callback: CallbackQuery):
    website_id = int(callback.data.split(":")[1])
    
    async for session in get_db_session():
        website_service = WebsiteService(session)
        success = await website_service.delete_website(website_id, callback.from_user.id)
        
        if success:
            from ..main import bot_instance
            if bot_instance.monitoring_service:
                await bot_instance.monitoring_service.stop_monitoring_website(website_id)
            
            await callback.message.edit_text("‚úÖ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞")


@router.callback_query(F.data == "add_website")
async def callback_add_website(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback add_website –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    await state.set_state(AddWebsiteStates.waiting_for_url)
    await callback.message.answer(
        "üåê <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com)"
    )
    await callback.answer()
    logger.info("Callback add_website –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")


@router.callback_query(F.data == "list_websites")
async def callback_list_websites(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback list_websites –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    await callback.answer()
    
    loading_msg = await callback.message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤...")
    
    try:
        async for session in get_db_session():
            website_service = WebsiteService(session)
            websites = await website_service.get_user_websites(callback.from_user.id)
            
            if not websites:
                await loading_msg.edit_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–∞–π—Ç–∞."
                )
                return
            
            keyboard = InlineKeyboardBuilder()
            
            text = "üìã <b>–í–∞—à–∏ —Å–∞–π—Ç—ã:</b>\n\n"
            
            for i, website in enumerate(websites, 1):
                status_emoji = "üü¢" if website.current_status == "up" else "üî¥" if website.current_status == "down" else "‚ö™"
                
                text += f"{status_emoji} {i}. <b>{website.name}</b>\n"
                text += f"   üîó {website.url}\n"
                text += f"   üìä Uptime: {website.uptime_percentage:.1f}%\n"
                
                if website.last_check:
                    if website.current_status == "up":
                        text += f"   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {website.last_check.strftime('%d.%m.%Y %H:%M')}\n"
                        if website.last_response_time:
                            text += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {website.last_response_time:.0f}ms\n"
                    else:
                        text += f"   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å: {website.last_check.strftime('%d.%m.%Y %H:%M')}\n"
                else:
                    text += "   ‚è≥ –ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è\n"
                
                text += "\n"
                
                keyboard.row(
                    InlineKeyboardButton(
                        text=f"üìä {website.name}",
                        callback_data=f"website_details:{website.id}"
                    ),
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                        callback_data=f"check_now:{website.id}"
                    )
                )
            
            keyboard.row(
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç", callback_data="add_website"),
                InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="general_stats")
            )
            
            await loading_msg.edit_text(text, reply_markup=keyboard.as_markup())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: {e}")
        await loading_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤")
    
    logger.info("Callback list_websites –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")


@router.callback_query(F.data.startswith("quick_add:"))
async def callback_quick_add(callback: CallbackQuery, state: FSMContext):
    url = callback.data.split(":", 1)[1]
    logger.info(f"–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ {url} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    if not validators.url(url):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL", show_alert=True)
        return
    
    await state.update_data(url=url)
    await state.set_state(AddWebsiteStates.waiting_for_name)
    
    await callback.message.edit_text(
        f"‚úÖ URL –ø—Ä–∏–Ω—è—Ç: {url}\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–π –±–ª–æ–≥, –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∏ —Ç.–¥.)"
    )
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()


@router.callback_query(F.data == "general_stats")
async def callback_general_stats(callback: CallbackQuery):
    await callback.answer("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@router.callback_query(F.data.startswith("website_history:"))
async def callback_website_history(callback: CallbackQuery):
    website_id = int(callback.data.split(":")[1])
    
    async for session in get_db_session():
        website_service = WebsiteService(session)
        website = await website_service.get_website_details(website_id)
        
        if not website:
            await callback.answer("‚ùå –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user or website.owner_id != user.id:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–∞–π—Ç—É")
            return
        
        text = f"""
üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫: {website.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>

üîó <b>URL:</b> <code>{website.url}</code>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {website.total_checks}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {website.successful_checks}
‚Ä¢ Uptime: {website.uptime_percentage:.1f}%

‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {website.check_interval} —Å–µ–∫
"""
        
        if website.last_check:
            text += f"\nüîç <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {website.last_check.strftime('%d.%m.%Y %H:%M:%S')}"
        
        if website.last_response_time:
            text += f"\n‚ö° <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</b> {website.last_response_time:.0f} –º—Å"
        
        if website.last_error:
            text += f"\n‚ùå <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</b> {website.last_error}"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"website_details:{website_id}"))
        
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    
    await callback.answer()


@router.callback_query(F.data.startswith("website_settings:"))
async def callback_website_settings(callback: CallbackQuery):
    website_id = int(callback.data.split(":")[1])
    
    async for session in get_db_session():
        website_service = WebsiteService(session)
        website = await website_service.get_website_details(website_id)
        
        if not website:
            await callback.answer("‚ùå –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user or website.owner_id != user.id:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–∞–π—Ç—É")
            return
        
        text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {website.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>

üîó <b>URL:</b> <code>{website.url}</code>
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {website.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {website.check_interval} —Å–µ–∫
üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {website.current_status.upper()}

<i>–§—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"website_details:{website_id}"))
        
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    
    await callback.answer()


@router.callback_query()
async def catch_all_callbacks(callback: CallbackQuery):
    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


def register_website_handlers(dp) -> None:
    dp.include_router(router)